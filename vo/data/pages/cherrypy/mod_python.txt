===== Running CherryPy behind Apache2 with mod_python =====

Here are some brief notes on how I got CherryPy working nicely with Apache, instead of the default built-in webserver. Remember to check the CherryPy and Apache log files for error tracebacks! mod_python has the annoying habit of reporting `unrecoverable' server errors, but the tracebacks should still be available in the logs.

Version information:

CherryPy 3.1.2, Apache 2.2.13, mod_python 3.3.1

[[http://www.electricmonk.nl/Writings/HomePage?action=download&upname=cherrypy_modpython.html|Some excellent notes]] (which I found after the fact).

====Configuring Apache====

I chose to host CherryPy from port 8080, to keep the default ports free. Once mod_python is compiled and placed in the appropriate directory, put the code below in a separate conf file in ''/etc/apache2/other/'':

<code apache cherrypy.conf>Listen 8080
LoadModule python_module libexec/apache2/mod_python.so

<VirtualHost *:8080>
        DocumentRoot "/Users/Azrael/VO/conesearch"
        <Location />
                Allow From All
                PythonPath "sys.path+['/Users/Azrael/VO/conesearch']"
                SetHandler python-program
                PythonHandler cherrypy._cpmodpy::handler
                PythonOption cherrypy.setup initialise::serverless
                PythonDebug On
        </Location>
</VirtualHost>
</code>

Things to be aware of: 

The application's working directory is '/'! This means that any referencing to files such as configurations or databases need to be absolute instead of relative. You always need to specify the entire path to the file.

Because Apache and CherryPy cache various bits and pieces, you must restart Apache to see any changes in your python code: ''apachectl -k graceful''.

The 'launcher' python script is in ''/Users/Azrael/VO/consearch/initialise.py''. The ''serverless()'' method starts the CherryPy //without// the built-in webserver.

Take care with the architecture of compiled python modules. For example, the default Apache server on OSX 10.5 is compiled as 64-bit. This means all extension modules (like ''psycopg2'', as I found out) need to be compiled for ''x86_64''. The default for Python's ''distutils'' is for 32-bit, i.e. ''i386''.
====Configuring CherryPy - initialise.py====

<code python initialise.py>
import cherrypy
import conesearch

__doc__ = """
Master configuration file for setting up one or more CherryPy
Cone Search services (apps). Each app must be mounted at a 
separate location.
"""

def start():
    # Site-wide config
    cherrypy.config.update(conesearch.current_dir+'/site.config')
    # Mount the static files so they are accessible by all
    config = {'/static':{'tools.staticdir.on': True,'tools.staticdir.dir': cones
earch.current_dir+'/static',}}
    cherrypy.tree.mount(conesearch.Common(), '/common', config)
    # Mount each app and load its own config
    cherrypy.tree.mount(conesearch.ConeSearch(), "/ucac3", conesearch.current_di
r+'/ucac3.config')
    cherrypy.engine.start()

def serverless():
    # USE APACHE WITH MOD_PYTHON ON mothra.anu.edu.au:8088
    cherrypy.server.unsubscribe()
    cherrypy.engine.timeout_monitor.unsubscribe() 
    cherrypy.engine.autoreload.unsubscribe() 
    start()

def serve():
    # USE CHERRYPY BUILT-IN SERVER ON PORT 8088
    cherrypy.engine.autoreload.subscribe()
    cherrypy.config.update({'server.socket_port':8088})
    start()
    cherrypy.engine.block()

if __name__ == "__main__":
    serve()

</code>

====Testing using the built-in webserver====

To run using CherryPy's webserver: ''python initialise.py''

To avoid conflicts with the Apache-hosted version, the ''serve()'' method mounts the CherryPy webserver at port 8088. Turning on auto-reload will restart the CherryPy webserver automatically after each source code change. 